
package project;


import java.awt.*;
import java.awt.event.*;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import java.sql.*;

import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

import java.util.Calendar;
import java.util.GregorianCalendar;
public class MyDatabaseHandler extends javax.swing.JFrame {
    public MyDatabaseHandler() {
        initComponents();
        currentDate();
        
    }
    Connection connect = null;
    ResultSet resultSet = null;
    PreparedStatement pStatement = null;
    public static String s;
   
    public static String arr[]=new String[10];  
   /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    public static Connection setConnection(){
        
        try{
            //String dbName = "database_project";
            Class.forName("com.mysql.jdbc.Driver");
            //Connection connect =DriverManager.getConnection("jdbc:mysql://localhost/" + dbName);
            
            Connection connect = DriverManager.getConnection
                ("jdbc:mysql://localhost/database_project?"+ "user=root");
            
            System.out.println("Successfully Connected..");
            //testQuery();
            
            return connect;
        }catch(Exception e){
            //JOptionPane.showMessageDialog(null , e);
            System.out.println("Connection Problem..");
            e.printStackTrace();
            return null;
        }
    }
    
    
   
    public void currentDate(){
        
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        
        date_txt.setText("Date:"+year+"-"+(month+1)+"-"+day);
        
        //int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);
        
        txt_time.setText("Time:"+hour+":"+minute);
        
        
    }
    
    
    public void close(){
        WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
        
    }
    
   
   
   /*public void ChooseInsert (String value){
       if(value.equals("student")){
           StudentInsert SInsert=new StudentInsert(connect);
           SInsert.setVisible(true);
       }
       else if (value.equals("advisor")){ 
           AdvisorInsert AInsert=new AdvisorInsert(connect);
           AInsert.setVisible(true);
       }
   }*/
    String value;
   
    public void show (String value){
        try{
            String query = "SELECT * FROM "+value;
           
            Statement statement ;
            statement = connect.createStatement();
            resultSet = statement
                   .executeQuery(query);
    if(value.equals("comment")){
            ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);

           
            while(resultSet.next()){
 
                String id = resultSet.getString("id");
                String comment_data = resultSet.getString("comment_data");
                
           
                ArrayList<String> list = new ArrayList<String>();
                list.add(id);
                list.add(comment_data);
                
            
                //model.addRow(list.toArray());
                
            }
  } 
  else if( value.equals("content")){
            ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String content_id = resultSet.getString("content_id");
                String content_title = resultSet.getString("content_title");
                String content_url = resultSet.getString("content_url");
                String content_type = resultSet.getString("content_type");
                String content_summary = resultSet.getString("content_summary");
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(content_id);
                list.add(content_title);
                list.add(content_url);
                list.add(content_type);
                list.add(content_summary);
               // model.addRow(list.toArray());
                
            }
  }
  else if(value.equals("content_course")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next()){
                String content_course_id = resultSet.getString("content_course_id");
                String course_name = resultSet.getString("course_name");
                String content_name=resultSet.getString("content_name");
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(content_course_id);
                list.add(course_name);
                list.add(content_name);
                //model.addRow(list.toArray());
                
            }
  }
  else if(value.equals("course")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
           // DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String course_id = resultSet.getString("course_id");
                String course_name = resultSet.getString("course_name");
                String course_dept=resultSet.getString("course_dept");
                String course_hour=resultSet.getString("course_hour");
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(course_id);
                list.add(course_name);
                list.add(course_dept);
                list.add(course_hour);
              
               // model.addRow(list.toArray());
            }
  }
  else if(value.equals("information")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next()){
                String user_id = resultSet.getString("user_id");
                String first_name = resultSet.getString("first_name");
                String last_name=resultSet.getString("last_name");
                String birth_date=resultSet.getString("birth_date");
                String gender=resultSet.getString("gender");
                String creation_date=resultSet.getString("creation_date");
                String access_id=resultSet.getString("access_id");
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(user_id);
                list.add(first_name);
                list.add(last_name);
                list.add(birth_date);
                list.add(gender);
                list.add(creation_date);
                list.add(access_id);
                //model.addRow(list.toArray());
            }
  }
  else if(value.equals("takes")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String takes_id = resultSet.getString("takes_id");
                String course_id = resultSet.getString("course_id");
                String grade = resultSet.getString("grade");
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(takes_id);
                list.add(course_id);
                list.add(grade);
                
                //model.addRow(list.toArray());
            }
  }
  else if (value.equals("teaches")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String teaches_id = resultSet.getString("teaches_id");
                String course_id = resultSet.getString("course_id");
                
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(teaches_id);
                list.add(course_id);
                
                //model.addRow(list.toArray());
            }
  }
  else if (value.equals("tutor")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next()){
                String tutor_id = resultSet.getString("tutor_id");
                String tutor_name = resultSet.getString("tutor_name");
                String access_id=resultSet.getString("access_id");
                
                
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(tutor_id);
                list.add(tutor_name);
                list.add(access_id);
                
                
                //model.addRow(list.toArray());
            }
  }
  else if (value.equals("tutor_review")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String id = resultSet.getString("id");
                String tutor_id = resultSet.getString("tutor_id");
                String comment_data=resultSet.getString("comment_data");
                String time=resultSet.getString("time");
                
            
                
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(id);
                list.add(tutor_id);
                list.add(comment_data);
                list.add(time);
                
              
                
                //model.addRow(list.toArray());
            }
  }
  
  
  
  else if (value.equals("user")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String user_id = resultSet.getString("user_id");
                String username = resultSet.getString("username");
                String password=resultSet.getString("password");
                String email=resultSet.getString("email");
                String status=resultSet.getString("status");
                String access_key=resultSet.getString("access_key");
                String time=resultSet.getString("time");
                
            
                
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(user_id);
                list.add(username);
                list.add(password);
                list.add(email);
                list.add(status);
                list.add(access_key);
                list.add(time);
                
              
                
                //model.addRow(list.toArray());
            }
  }
  
  
  
  
  else if (value.equals("user_review")){
             ArrayList<String>  columns = new ArrayList<String>();
            for(int i = 1 ; i <= resultSet.getMetaData().getColumnCount() ; i ++ ){
                System.out.println(resultSet.getMetaData().getColumnName(i));
                columns.add(resultSet.getMetaData().getColumnName(i));
            }
            //System.out.println(resultSet.getMetaData().getColumnCount());
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    System.out.println(value);
            while(resultSet.next() ){
                String id = resultSet.getString("id");
                String user_id = resultSet.getString("user_id");
                String comment_data=resultSet.getString("comment_data");
                String time=resultSet.getString("time");
              
                
                
                ArrayList<String> list = new ArrayList<String>();
                list.add(id);
                list.add(user_id);
                list.add(comment_data);
                list.add(time);
               // model.addRow(list.toArray());
            }
            System.out.println("Successfully Done Query..");
  }
        }catch(Exception e){
            System.out.println("Error in Query..");
            e.printStackTrace();
        }
       
   }
    
    public void comboselect(){
        int d = jComboBox1.getSelectedIndex();
        
        if(d== 0){
            //dispose();
            comment d0 = new comment();
            d0.setVisible(true);
            
        }
        if(d== 1){
            //dispose();
            content d1 = new content();
            d1.setVisible(true);
        }
        if(d== 2){
            
            ContentCourse d2 = new ContentCourse();
            d2.setVisible(true);
        }
        
        if(d== 3){
            
            Course d3 = new Course();
            d3.setVisible(true);
        }
        
        if(d== 4){
            
            Information d4 = new Information();
            d4.setVisible(true);
        }
        
        if(d== 5){
            takes d5 = new takes();
            d5.setVisible(true);
        }
        
        if(d== 6){
            Teaches d6 = new Teaches();
            d6.setVisible(true);
        }
        
        if(d== 7){
            Tutor d7 = new Tutor();
            d7.setVisible(true);
        }
        
        if(d== 8){
            TutorReview d8 = new TutorReview();
            d8.setVisible(true);
        }
        
        if(d== 9){
            
            User d9 = new User();
            d9.setVisible(true);
        }
        
        if(d== 10){
            UserReview d10 = new UserReview();
            d10.setVisible(true);
        }
        
        
        
    }
   
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        date_txt = new javax.swing.JMenu();
        txt_time = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "comment", "content", "content_course", "course", "information", "takes", "teaches", "tutor", "tutor_review", "user", "user_review" }));
        jComboBox1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Project Name : Tutorial Website Database Management");

        jLabel3.setText("Table List");

        jToolBar1.setRollover(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(173, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addGap(43, 43, 43)
                .addComponent(jLabel3)
                .addGap(9, 9, 9)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(289, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon("C:\\Users\\HP NPC\\Documents\\NetBeansProjects\\Project\\icon\\Files-New-File-icon.png")); // NOI18N
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon("C:\\Users\\HP NPC\\Documents\\NetBeansProjects\\Project\\icon\\Button-Close-icon.png")); // NOI18N
        jMenuItem2.setText("Close");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        date_txt.setText("Date");
        jMenuBar1.add(date_txt);

        txt_time.setText("Time");
        jMenuBar1.add(txt_time);

        jMenu3.setText("Help");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("About Us");
        jMenu3.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Help File");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        
        
        comboselect();
    }//GEN-LAST:event_jComboBox1PopupMenuWillBecomeInvisible

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        
        close();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        
        try{
            
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+"F:\\Y-3 S-1 = AUST\\Theory Subject\\CSE3103 Database\\book\\SQL-book by NSB.pdf");
            
        } catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyDatabaseHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyDatabaseHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyDatabaseHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyDatabaseHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyDatabaseHandler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu date_txt;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu txt_time;
    // End of variables declaration//GEN-END:variables
}
